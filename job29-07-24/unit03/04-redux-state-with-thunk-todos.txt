Creating a To-Do App using Redux and Thunk involves setting up a Redux store, actions, reducers, and asynchronous operations with Thunk. Here’s a step-by-step guide to help you build a basic To-Do App:

### 1. Setting Up the Project
First, create a new React project and install necessary dependencies:

```bash
npx create-react-app todo-app
cd todo-app
npm install redux react-redux redux-thunk
```

### 2. Project Structure
Organize your project as follows:

```
src/
│
├── components/
│   ├── AddTodo.js
│   ├── Todo.js
│   └── TodoList.js
│
├── actions/
│   └── todoActions.js
│
├── reducers/
│   └── todoReducer.js
│
├── store/
│   └── store.js
│
├── App.js
└── index.js
```

### 3. Redux Setup

#### store/store.js
Set up the Redux store and apply the Thunk middleware:

```javascript
import { createStore, applyMiddleware, combineReducers } from 'redux';
import { Provider } from 'react-redux';
import thunk from 'redux-thunk';
import todoReducer from '../reducers/todoReducer';

const rootReducer = combineReducers({
  todos: todoReducer,
});

const store = createStore(rootReducer, applyMiddleware(thunk));

export default store;
```

#### reducers/todoReducer.js
Create the reducer to manage the state of the todos:

```javascript
const initialState = {
  todos: [],
  loading: false,
  error: null,
};

const todoReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'ADD_TODO':
      return {
        ...state,
        todos: [...state.todos, action.payload],
      };
    case 'REMOVE_TODO':
      return {
        ...state,
        todos: state.todos.filter(todo => todo.id !== action.payload),
      };
    case 'FETCH_TODOS_REQUEST':
      return {
        ...state,
        loading: true,
        error: null,
      };
    case 'FETCH_TODOS_SUCCESS':
      return {
        ...state,
        loading: false,
        todos: action.payload,
      };
    case 'FETCH_TODOS_FAILURE':
      return {
        ...state,
        loading: false,
        error: action.payload,
      };
    default:
      return state;
  }
};

export default todoReducer;
```

#### actions/todoActions.js
Define actions to interact with the reducer:

```javascript
export const addTodo = (todo) => ({
  type: 'ADD_TODO',
  payload: todo,
});

export const removeTodo = (id) => ({
  type: 'REMOVE_TODO',
  payload: id,
});

export const fetchTodosRequest = () => ({
  type: 'FETCH_TODOS_REQUEST',
});

export const fetchTodosSuccess = (todos) => ({
  type: 'FETCH_TODOS_SUCCESS',
  payload: todos,
});

export const fetchTodosFailure = (error) => ({
  type: 'FETCH_TODOS_FAILURE',
  payload: error,
});

export const fetchTodos = () => {
  return (dispatch) => {
    dispatch(fetchTodosRequest());
    fetch('https://jsonplaceholder.typicode.com/todos')
      .then(response => response.json())
      .then(data => dispatch(fetchTodosSuccess(data)))
      .catch(error => dispatch(fetchTodosFailure(error.message)));
  };
};
```

### 4. Creating Components

#### components/AddTodo.js
Create a component to add new todos:

```javascript
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { addTodo } from '../actions/todoActions';

const AddTodo = () => {
  const [title, setTitle] = useState('');
  const dispatch = useDispatch();

  const handleSubmit = (e) => {
    e.preventDefault();
    const newTodo = {
      id: Date.now(),
      title,
      completed: false,
    };
    dispatch(addTodo(newTodo));
    setTitle('');
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Add Todo"
      />
      <button type="submit">Add</button>
    </form>
  );
};

export default AddTodo;
```

#### components/Todo.js
Create a component to display individual todos:

```javascript
import React from 'react';
import { useDispatch } from 'react-redux';
import { removeTodo } from '../actions/todoActions';

const Todo = ({ todo }) => {
  const dispatch = useDispatch();

  const handleRemove = () => {
    dispatch(removeTodo(todo.id));
  };

  return (
    <li>
      {todo.title}
      <button onClick={handleRemove}>Remove</button>
    </li>
  );
};

export default Todo;
```

#### components/TodoList.js
Create a component to display the list of todos:

```javascript
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import Todo from './Todo';
import { fetchTodos } from '../actions/todoActions';

const TodoList = () => {
  const { todos, loading, error } = useSelector(state => state.todos);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchTodos());
  }, [dispatch]);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;

  return (
    <ul>
      {todos.map(todo => (
        <Todo key={todo.id} todo={todo} />
      ))}
    </ul>
  );
};

export default TodoList;
```

### 5. Integrating Everything

#### App.js
Integrate all components into the main `App` component:

```javascript
import React from 'react';
import AddTodo from './components/AddTodo';
import TodoList from './components/TodoList';

const App = () => {
  return (
    <div>
      <h1>To-Do List</h1>
      <AddTodo />
      <TodoList />
    </div>
  );
};

export default App;
```

#### index.js
Wrap your app with the `Provider` to connect Redux with React:

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import store from './store/store';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
```

This completes the basic setup for a To-Do App using Redux and Thunk. You can further enhance the app by adding more features like editing todos, filtering, and persisting data.