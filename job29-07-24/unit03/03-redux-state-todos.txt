To perform CRUD operations on a list of `Person` objects (each with `first_name` and `last_name`) using Redux, and include form validation, follow these steps:

### 1. Setup Project

Assuming you already have a React project set up, install the necessary Redux packages:

```bash
npm install redux react-redux
```

### 2. Project Structure

Here’s a suggested file structure:

```
src/
│
├── components/
│   ├── PersonForm.js
│   ├── PersonList.js
│   └── Person.js
│
├── actions/
│   └── personActions.js
│
├── reducers/
│   └── personReducer.js
│
├── store/
│   └── store.js
│
├── App.js
└── index.js
```

### 3. Redux Setup

#### store/store.js

Create the Redux store:

```javascript
import { createStore, combineReducers } from 'redux';
import personReducer from '../reducers/personReducer';

const rootReducer = combineReducers({
  persons: personReducer,
});

const store = createStore(rootReducer);

export default store;
```

#### reducers/personReducer.js

Define the reducer to handle CRUD operations:

```javascript
const initialState = {
  persons: [],
};

const personReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'ADD_PERSON':
      return {
        ...state,
        persons: [...state.persons, action.payload],
      };
    case 'UPDATE_PERSON':
      return {
        ...state,
        persons: state.persons.map(person =>
          person.id === action.payload.id ? action.payload : person
        ),
      };
    case 'DELETE_PERSON':
      return {
        ...state,
        persons: state.persons.filter(person => person.id !== action.payload),
      };
    default:
      return state;
  }
};

export default personReducer;
```

#### actions/personActions.js

Define actions for CRUD operations:

```javascript
export const addPerson = (person) => ({
  type: 'ADD_PERSON',
  payload: person,
});

export const updatePerson = (person) => ({
  type: 'UPDATE_PERSON',
  payload: person,
});

export const deletePerson = (id) => ({
  type: 'DELETE_PERSON',
  payload: id,
});
```

### 4. Creating Components

#### components/PersonForm.js

Create a form component with validation:

```javascript
import React, { useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { addPerson, updatePerson } from '../actions/personActions';

const PersonForm = ({ currentPerson, onCancel }) => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [errors, setErrors] = useState({});
  const dispatch = useDispatch();

  useEffect(() => {
    if (currentPerson) {
      setFirstName(currentPerson.first_name);
      setLastName(currentPerson.last_name);
    }
  }, [currentPerson]);

  const validateForm = () => {
    const errors = {};
    if (!firstName) errors.firstName = 'First name is required';
    if (!lastName) errors.lastName = 'Last name is required';
    return errors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    const person = {
      id: currentPerson ? currentPerson.id : Date.now(),
      first_name: firstName,
      last_name: lastName,
    };

    if (currentPerson) {
      dispatch(updatePerson(person));
    } else {
      dispatch(addPerson(person));
    }

    setFirstName('');
    setLastName('');
    setErrors({});
    onCancel();
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>First Name</label>
        <input
          type="text"
          value={firstName}
          onChange={(e) => setFirstName(e.target.value)}
        />
        {errors.firstName && <p>{errors.firstName}</p>}
      </div>
      <div>
        <label>Last Name</label>
        <input
          type="text"
          value={lastName}
          onChange={(e) => setLastName(e.target.value)}
        />
        {errors.lastName && <p>{errors.lastName}</p>}
      </div>
      <button type="submit">Save</button>
      <button type="button" onClick={onCancel}>Cancel</button>
    </form>
  );
};

export default PersonForm;
```

#### components/Person.js

Create a component to display a person:

```javascript
import React from 'react';

const Person = ({ person, onEdit, onDelete }) => {
  return (
    <li>
      {person.first_name} {person.last_name}
      <button onClick={() => onEdit(person)}>Edit</button>
      <button onClick={() => onDelete(person.id)}>Delete</button>
    </li>
  );
};

export default Person;
```

#### components/PersonList.js

Create a component to display the list of persons:

```javascript
import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import Person from './Person';
import PersonForm from './PersonForm';
import { deletePerson } from '../actions/personActions';

const PersonList = () => {
  const [editingPerson, setEditingPerson] = useState(null);
  const persons = useSelector(state => state.persons.persons);
  const dispatch = useDispatch();

  const handleEdit = (person) => {
    setEditingPerson(person);
  };

  const handleDelete = (id) => {
    dispatch(deletePerson(id));
  };

  const handleCancel = () => {
    setEditingPerson(null);
  };

  return (
    <div>
      <h1>Person List</h1>
      {editingPerson ? (
        <PersonForm currentPerson={editingPerson} onCancel={handleCancel} />
      ) : (
        <>
          <PersonForm onCancel={handleCancel} />
          <ul>
            {persons.map(person => (
              <Person
                key={person.id}
                person={person}
                onEdit={handleEdit}
                onDelete={handleDelete}
              />
            ))}
          </ul>
        </>
      )}
    </div>
  );
};

export default PersonList;
```

### 5. Integrating Everything

#### App.js

Integrate all components into the main `App` component:

```javascript
import React from 'react';
import PersonList from './components/PersonList';

const App = () => {
  return (
    <div>
      <PersonList />
    </div>
  );
};

export default App;
```

#### index.js

Wrap your app with the `Provider` to connect Redux with React:

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import store from './store/store';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
```

### Summary

In this setup, you have a `Person` CRUD application using Redux for state management. The form includes validation to ensure that `first_name` and `last_name` are provided before adding or updating a person. You can further extend this by adding more features or improving the UI.