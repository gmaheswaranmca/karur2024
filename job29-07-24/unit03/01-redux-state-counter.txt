Sure! Here is an easy example of state management with Redux using a counter app.

### Step-by-Step Example

1. **Set up your project:**
   ```bash
   npx create-react-app redux-counter
   cd redux-counter
   npm install @reduxjs/toolkit react-redux
   ```

2. **Create the Redux store:**
   - Create a folder named `store` in the `src` directory.
   - Inside `store`, create a file named `store.js`.

   ```javascript
   // src/store/store.js
   import { configureStore } from '@reduxjs/toolkit';
   import counterReducer from './counterSlice';

   export const store = configureStore({
     reducer: {
       counter: counterReducer,
     },
   });
   ```

3. **Create the counter slice:**
   - Inside the `store` folder, create a file named `counterSlice.js`.

   ```javascript
   // src/store/counterSlice.js
   import { createSlice } from '@reduxjs/toolkit';

   export const counterSlice = createSlice({
     name: 'counter',
     initialState: {
       value: 0,
     },
     reducers: {
       increment: (state) => {
         state.value += 1;
       },
       decrement: (state) => {
         state.value -= 1;
       },
       incrementByAmount: (state, action) => {
         state.value += action.payload;
       },
     },
   });

   export const { increment, decrement, incrementByAmount } = counterSlice.actions;

   export default counterSlice.reducer;
   ```

4. **Provide the store to your React app:**
   - In `src/index.js`, wrap your app with the `Provider` from `react-redux` and pass the store to it.

   ```javascript
   // src/index.js
   import React from 'react';
   import ReactDOM from 'react-dom';
   import './index.css';
   import App from './App';
   import { Provider } from 'react-redux';
   import { store } from './store/store';

   ReactDOM.render(
     <Provider store={store}>
       <App />
     </Provider>,
     document.getElementById('root')
   );
   ```

5. **Create the Counter component:**
   - In `src`, create a file named `Counter.js`.

   ```javascript
   // src/Counter.js
   import React from 'react';
   import { useSelector, useDispatch } from 'react-redux';
   import { increment, decrement, incrementByAmount } from './store/counterSlice';

   function Counter() {
     const count = useSelector((state) => state.counter.value);
     const dispatch = useDispatch();

     return (
       <div>
         <h1>Counter: {count}</h1>
         <button onClick={() => dispatch(increment())}>Increment</button>
         <button onClick={() => dispatch(decrement())}>Decrement</button>
         <button onClick={() => dispatch(incrementByAmount(5))}>Increment by 5</button>
       </div>
     );
   }

   export default Counter;
   ```

6. **Use the Counter component in your App:**
   - In `src/App.js`, import and use the `Counter` component.

   ```javascript
   // src/App.js
   import React from 'react';
   import './App.css';
   import Counter from './Counter';

   function App() {
     return (
       <div className="App">
         <Counter />
       </div>
     );
   }

   export default App;
   ```

### Explanation

1. **Store setup (`store/store.js`)**:
   - `configureStore` is used to create a Redux store and automatically sets up the Redux DevTools extension.

2. **Slice creation (`store/counterSlice.js`)**:
   - `createSlice` generates action creators and action types automatically based on the reducers and state we define.

3. **Provider setup (`src/index.js`)**:
   - `Provider` makes the Redux store available to any nested components that need to access the Redux store.

4. **Counter component (`src/Counter.js`)**:
   - `useSelector` allows us to extract data from the Redux store state.
   - `useDispatch` returns a reference to the `dispatch` function from the Redux store.

This example demonstrates the basics of setting up a Redux store, creating slices, and connecting Redux to a React application using the Redux Toolkit and React-Redux.